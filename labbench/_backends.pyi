import contextlib
from . import _device as core, util as util
from typing import Any, Optional


class ShellBackend(core.Device):

    def __init__(self, resource: str='str', binary_path: str='NoneType', timeout: str='int'):
        ...
    binary_path: Any = ...
    timeout: Any = ...

    def __imports__(self) -> None:
        ...
    backend: Any = ...

    def open(self) -> None:
        ...

    @property
    def respawn(self) -> None:
        ...

    @property
    def exception_on_stderr(self) -> None:
        ...

    def foreground(self, **flags: Any):
        ...

    def background(self, **flags: Any):
        ...

    def read_stdout(self, wait_for: int=...):
        ...

    def write_stdin(self, text: Any) -> None:
        ...

    def kill(self) -> None:
        ...

    def running(self):
        ...

    def clear(self) -> None:
        ...

    def close(self) -> None:
        ...


class DotNetDevice(core.Device):

    def __init__(self, resource: str='str'):
        ...
    library: Any = ...
    dll_name: Any = ...
    dll: Any = ...

    def __imports__(self) -> None:
        ...

    def open(self) -> None:
        ...


class LabviewSocketInterface(core.Device):

    def __init__(
        self,
        resource: str='str',
        tx_port: str='int',
        rx_port: str='int',
        delay: str='int',
        timeout: str='int',
        rx_buffer_size: str='int'
    ):
        ...
    resource: Any = ...
    tx_port: Any = ...
    rx_port: Any = ...
    delay: Any = ...
    timeout: Any = ...
    rx_buffer_size: Any = ...
    backend: Any = ...

    def open(self) -> None:
        ...

    def close(self) -> None:
        ...

    def write(self, msg: Any) -> None:
        ...

    def set_key(self, key: Any, value: Any, name: Any) -> None:
        ...

    def read(self, convert_func: Optional[Any]=...):
        ...

    def clear(self) -> None:
        ...


class SerialDevice(core.Device):

    def __init__(
        self,
        resource: str='str',
        timeout: str='int',
        write_termination: str='bytes',
        baud_rate: str='int',
        parity: str='bytes',
        stopbits: str='int',
        xonxoff: str='bool',
        rtscts: str='bool',
        dsrdtr: str='bool'
    ):
        ...
    timeout: Any = ...
    write_termination: Any = ...
    baud_rate: int = ...
    parity: Any = ...
    stopbits: Any = ...
    xonxoff: Any = ...
    rtscts: Any = ...
    dsrdtr: Any = ...

    def __imports__(self) -> None:
        ...
    backend: Any = ...

    def open(self) -> None:
        ...

    def close(self) -> None:
        ...

    @classmethod
    def from_hwid(cls, hwid: Optional[Any]=..., *args: Any, **connection_params: Any):
        ...

    @staticmethod
    def list_ports(hwid: Optional[Any]=...):
        ...


class SerialLoggingDevice(SerialDevice):

    def __init__(
        self,
        resource: str='str',
        timeout: str='int',
        write_termination: str='bytes',
        baud_rate: str='int',
        parity: str='bytes',
        stopbits: str='int',
        xonxoff: str='bool',
        rtscts: str='bool',
        dsrdtr: str='bool',
        poll_rate: str='float',
        data_format: str='bytes',
        stop_timeout: str='float',
        max_queue_size: str='int'
    ):
        ...
    poll_rate: Any = ...
    data_format: Any = ...
    stop_timeout: Any = ...
    max_queue_size: Any = ...

    def configure(self) -> None:
        ...

    def start(self) -> None:
        ...

    def stop(self) -> None:
        ...

    def running(self):
        ...

    def fetch(self):
        ...

    def clear(self) -> None:
        ...

    def close(self) -> None:
        ...


class TelnetDevice(core.Device):

    def __init__(self, resource: str='str', timeout: str='int', port: str='int'):
        ...
    timeout: Any = ...
    port: Any = ...

    def __imports__(self) -> None:
        ...
    backend: Any = ...

    def open(self) -> None:
        ...

    def close(self) -> None:
        ...


class VISADevice(core.Device):

    def __init__(
        self,
        resource: str='str',
        read_termination: str='str',
        write_termination: str='str'
    ):
        ...
    read_termination: Any = ...
    write_termination: Any = ...
    identity: Any = ...
    options: Any = ...

    def status_byte(self):
        ...

    @classmethod
    def __imports__(cls) -> None:
        ...
    backend: Any = ...

    def open(self) -> None:
        ...

    def close(self) -> None:
        ...

    @classmethod
    def set_backend(cls, backend_name: Any) -> None:
        ...

    @classmethod
    def list_resources(cls):
        ...

    def write(self, msg: Any) -> None:
        ...

    def query(self, msg: Any, timeout: Any=...) -> str:
        ...

    def get_key(self, scpi_key: Any, name: Optional[Any]=...):
        ...

    def set_key(self, scpi_key: Any, value: Any, name: Optional[Any]=...) -> None:
        ...

    def wait(self) -> None:
        ...

    def preset(self) -> None:
        ...

    def overlap_and_block(self, timeout: Optional[Any]=..., quiet: bool=...) -> None:
        ...


    class suppress_timeout(contextlib.suppress):

        def __exit__(self, exctype: Any, excinst: Any, exctb: Any):
            ...


class Win32ComDevice(core.Device):

    def __init__(self, resource: str='str', concurrency: str='bool', com_object: str='str'):
        ...
    com_object: Any = ...
    concurrency: Any = ...

    def __imports__(self) -> None:
        ...
    backend: Any = ...

    def open(self):
        ...

    def close(self) -> None:
        ...
