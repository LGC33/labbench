from labbench.core import *
import labbench
import builtins

class HasTraits(builtins.object):
    def __init__(self) -> None: ...
    def __iter__(self) -> None: ...
    def __len__(self) -> None: ...
    def __getitem__(self, name) -> None: ...
    def __notify__(self, name, value, type) -> None: ...
    def __command_set__(self, name, command, value) -> None: ...
    def __command_get__(self, name, command) -> None: ...
    pass

class HasSettings(labbench.core.HasTraits):
    def __init__(self) -> None: ...
    def __dir__(self) -> None: ...
    def __get_value__(self, name) -> None: ...
    def __set_value__(self, name, value) -> None: ...
    pass

class HasStates(labbench.core.HasTraits):
    pass

class Device(labbench.core.HasStates):
    def open(self) -> None: ...
    def close(self) -> None: ...
    def __init__(self, resource: str = '', *, concurrency_support: bool = True) -> None: ...
    def __setattr__(self, name, value) -> None: ...
    def __open_wrapper__(self) -> None: ...
    def __close_wrapper__(self) -> None: ...
    def __imports__(self) -> None: ...
    def __enter__(self) -> None: ...
    def __exit__(self, type_, value, traceback) -> None: ...
    def __del__(self) -> None: ...
    def __repr__(self) -> None: ...
    @Bool(help=' are we connected? ')
    def connected(self) -> None: ...
    def connected(func) -> None: ...
    def __str__(self) -> None: ...
    def __init_wrapped__(self, **settings) -> None: ...
    pass

